station = 1:4)
# Convert to SpatialPointsDataFrame
coordinates(station) <- ~long + lat
wkt <- sf::st_crs(4326)[[2]]
proj4string(station) <-sf::st_crs(4326)[[2]]
# View the station location using the mapview function
mapview(station)
# Set the origin
ori <- SpatialPoints(cbind(123, 7), proj4string =  CRS("+init=epsg:4326"))
# Set the origin
ori <- SpatialPoints(cbind(123, 7), proj4string =  sf::st_crs(4326)[[2]])
# Set the origin
ori <- SpatialPoints(cbind(123, 7), proj4string =  CRS("+init=epsg:4326"))
# Set the origin
ori <- SpatialPoints(cbind(123, 7), proj4string =  proj4string(station))
# Set the projection. They were latitude and longitude, so use WGS84 long-lat projection
proj4string(station) <-sf::st_crs(4326)[[2]]
# Create a data frame showing the **Latitude/Longitude**
station <- data.frame(lat = c(7.16, 8.6, 8.43, 8.15),
long = c(124.21, 123.35, 124.28, 125.08),
station = 1:4)
# Convert to SpatialPointsDataFrame
coordinates(station) <- ~long + lat
# Set the projection. They were latitude and longitude, so use WGS84 long-lat projection
proj4string(station) <-sf::st_crs(4326)[[2]]
# View the station location using the mapview function
mapview(station)
# Set the origin
ori <- SpatialPoints(cbind(123, 7), proj4string(station))
# Set the origin
ori <- SpatialPoints(cbind(123, 7), proj4string=CRS(as.character(NA))
# Set the origin
ori <- SpatialPoints(cbind(123, 7), proj4string=CRS(as.character(NA)))
# Set the origin
ori <- SpatialPoints(cbind(123, 7), proj4string=CRS(as.character(NA)))
# Convert the projection of ori
# Use EPSG: 3857 (Spherical Mercator)
ori_t <- spTransform(ori, CRSobj = CRS("+init=epsg:3857"))
View(ori)
# Set the origin
ori <- SpatialPoints(cbind(123, 7), proj4string=CRS(as.character(4326)))
# Set the origin
ori <- SpatialPoints(cbind(123, 7), proj4string=CRS(as.character(NA)))
# Convert the projection of ori
# Use EPSG: 3857 (Spherical Mercator)
ori_t <- spTransform(ori, CRSobj = CRS("+init=epsg:3857"))
# Convert the projection of ori
# Use EPSG: 3857 (Spherical Mercator)
#ori_t <- spTransform(ori, CRSobj = CRS("+init=epsg:3857"))
ori_t<- sp::spTransform(ori, sp::CRS("+proj=longlat +datum=WGS84 +no_defs"))
# Convert the projection of ori
# Use EPSG: 3857 (Spherical Mercator)
#ori_t <- spTransform(ori, CRSobj = CRS("+init=epsg:3857"))
ori_t<- sp::spTransform(ori, CRSobj = sp::CRS("+proj=longlat +datum=WGS84 +no_defs"))
library(sp)
library(rgdal)
library(raster)
library(leaflet)
library(mapview)
# Create a data frame showing the **Latitude/Longitude**
station <- data.frame(lat = c(7.16, 8.6, 8.43, 8.15),
long = c(124.21, 123.35, 124.28, 125.08),
station = 1:4)
# Convert to SpatialPointsDataFrame
coordinates(station) <- ~long + lat
# Set the projection. They were latitude and longitude, so use WGS84 long-lat projection
proj4string(station) <-sf::st_crs(4326)[[2]]
library(sp)
library(sp)
# Create a data frame showing the **Latitude/Longitude**
station <- data.frame(lat = c(7.16, 8.6, 8.43, 8.15),
long = c(124.21, 123.35, 124.28, 125.08),
station = 1:4)
# Convert to SpatialPointsDataFrame
coordinates(station) <- ~long + lat
# Set the projection. They were latitude and longitude, so use WGS84 long-lat projection
proj4string(station) <-sf::st_crs(4326)[[2]]
# View the station location using the mapview function
mapview(station)
# Set the origin
ori <- SpatialPoints(cbind(123, 7), proj4string =  CRS("+init=epsg:4326"))
# Set the origin
proj4string(r) <- CRS("+init=epsg:5678")
# Set the origin
proj4string(station) <- CRS("+init=epsg:5678")
library(sp)
library(rgdal)
library(readr)
huayColordata <- read_delim("D:/DOCUMENTOS/UNIVERSIDAD_DE_LIMA/IDIC/2021/humanitariaLogistics/googleEarthAPI/huaycolor3Dplot/huayColordata.txt",
"\t", quote = "'", escape_double = FALSE,
trim_ws = TRUE)
View(huayColordata)
#Function
LongLatToUTM<-function(x,y,zone){
xy <- data.frame(ID = 1:length(x), X = x, Y = y)
coordinates(xy) <- c("X", "Y")
proj4string(xy) <- CRS("+proj=longlat +datum=WGS84")  ## for example
res <- spTransform(xy, CRS(paste("+proj=utm +zone=",zone," ellps=WGS84",sep='')))
return(as.data.frame(res))
}
x<-huayColordata$longitude
y<-huayColordata$latitude
#LongLatToUTM(x,y,18)
datos<-LongLatToUTM(x,y,18)
x <- datos$X
y <- datos$Y
z <- huayColordata$`altitude (m)`
r<-cbind.data.frame(x,y,z)
str(r)
#using rgl
plot3d(x = x, y = y, z = z)
#create custom color for rgl plot
myColorRamp <- function(colors, values) {
v <- (values - min(values))/diff(range(values))
x <- colorRamp(colors)(v)
rgb(x[,1], x[,2], x[,3], maxColorValue = 255)
}
# z as the fourth variable
col <- myColorRamp(c("blue", "green","yellow", "orange", "red"), z)
plot3d(x = x, y = y, z = z, col=col)
#help('raster')
rasterFromXYZ(as.data.frame(r))->dem
#create the extent and the raster
e <- extent(r[,(1:2)])
View(e)
r2 <- raster(e, ncol=518, nrow=520, crs= "+proj=longlat +datum=WGS84")
View(r2)
r_new <- rasterize(r[,1:2], r2, r[,3], fun=mean)
#create a custom pallate
rgb.pal <- colorRampPalette(c("snow1","snow2","light blue","blue","dark blue", "orange","red"), space = "rgb")
png(paste("raster_zhh",".png",sep=""))
plot(r_new, col=rgb.pal(200), xlab="Lon", ylab="Lat", main=paste("Horizontal Reflectivity"),
legend.args=list(text=paste0("zhh [db]"), side=4, font=2, line=2.5, cex=0.8))
dev.off()
rasterFromXYZ(as.data.frame(r_new))->dem
rasterFromXYZ(as.data.frame(r2))->dem
dim(r_new)
fig <- plot_ly(z = ~r_new)
fig <- fig %>% add_surface()
fig
#another example using plotly
#as.matrix(rasterFromXYZ(r)) -> dem
as.matrix(r_new)->dem
dim(dem)
fig <- plot_ly(z = ~dem)
fig <- fig %>% add_surface()
fig
View(r)
#an example using dem data
read.csv("xyz_mrp") -> r
x <- r$x
y <- r$y
z <- r$mrpUTM1_Resample1
#using rgl
plot3d(x = x, y = y, z = z)
#create custom color for rgl plot
myColorRamp <- function(colors, values) {
v <- (values - min(values))/diff(range(values))
x <- colorRamp(colors)(v)
rgb(x[,1], x[,2], x[,3], maxColorValue = 255)
}
# z as the fourth variable
col <- myColorRamp(c("blue", "green","yellow", "orange", "red"), z)
plot3d(x = x, y = y, z = z, col=col)
#another example using plotly
as.matrix(rasterFromXYZ(r)) -> dem
dim(dem)
library(sp)
library(rgdal)
library(readr)
huayColordata <- read_delim("D:/DOCUMENTOS/UNIVERSIDAD_DE_LIMA/IDIC/2021/humanitariaLogistics/googleEarthAPI/huaycolor3Dplot/huayColordata.txt",
"\t", quote = "'", escape_double = FALSE,
trim_ws = TRUE)
View(huayColordata)
#Function
LongLatToUTM<-function(x,y,zone){
xy <- data.frame(ID = 1:length(x), X = x, Y = y)
coordinates(xy) <- c("X", "Y")
proj4string(xy) <- CRS("+proj=longlat +datum=WGS84")  ## for example
res <- spTransform(xy, CRS(paste("+proj=utm +zone=",zone," ellps=WGS84",sep='')))
return(as.data.frame(res))
}
x<-huayColordata$longitude
y<-huayColordata$latitude
#LongLatToUTM(x,y,18)
datos<-LongLatToUTM(x,y,18)
x <- datos$X
y <- datos$Y
z <- huayColordata$`altitude (m)`
r<-cbind.data.frame(x,y,z)
str(r)
#create the extent and the raster
e <- extent(r[,(1:2)])
r2 <- raster(e, ncol=788, nrow=810, crs= "+proj=longlat +datum=WGS84")
r_new <- rasterize(r[,1:2], r2, r[,3], fun=mean)
#using rgl
plot3d(x = x, y = y, z = z)
#create a custom pallate
rgb.pal <- colorRampPalette(c("snow1","snow2","light blue","blue","dark blue", "orange","red"), space = "rgb")
png(paste("raster_zhh2",".png",sep=""))
plot(r_new, col=rgb.pal(200), xlab="Lon", ylab="Lat", main=paste("Horizontal Reflectivity"),
legend.args=list(text=paste0("zhh [db]"), side=4, font=2, line=2.5, cex=0.8))
dev.off()
as.matrix(r_new)->dem
dim(dem)
fig <- plot_ly(z = ~dem)
fig <- fig %>% add_surface()
fig
#using rgl
plot3d(x = x, y = y, z = z)
#create custom color for rgl plot
myColorRamp <- function(colors, values) {
v <- (values - min(values))/diff(range(values))
x <- colorRamp(colors)(v)
rgb(x[,1], x[,2], x[,3], maxColorValue = 255)
}
# z as the fourth variable
col <- myColorRamp(c("blue", "green","yellow", "orange", "red"), z)
plot3d(x = x, y = y, z = z, col=col)
rgl_init <- function(new.device = FALSE, bg = "white", width = 640) {
if( new.device | rgl.cur() == 0 ) {
rgl.open()
par3d(windowRect = 50 + c( 0, 0, width, width ) )
rgl.bg(color = bg )
}
rgl.clear(type = c("shapes", "bboxdeco"))
rgl.viewpoint(theta = 15, phi = 20, zoom = 0.7)
}
rgl.spheres(x, y, z, r = 15, color = "yellow", size=20)  # Scatter plot
#using rgl
plot3d(x = x, y = y, z = z)
#another example using plotly
#as.matrix(rasterFromXYZ(r)) -> dem
as.matrix(r2)->dem
library(sp)
library(rgdal)
library(readr)
huayColordata <- read_delim("D:/DOCUMENTOS/UNIVERSIDAD_DE_LIMA/IDIC/2021/humanitariaLogistics/googleEarthAPI/huaycolor3Dplot/huayColordata.txt",
"\t", quote = "'", escape_double = FALSE,
trim_ws = TRUE)
#Function
LongLatToUTM<-function(x,y,zone){
xy <- data.frame(ID = 1:length(x), X = x, Y = y)
coordinates(xy) <- c("X", "Y")
proj4string(xy) <- CRS("+proj=longlat +datum=WGS84")  ## for example
res <- spTransform(xy, CRS(paste("+proj=utm +zone=",zone," ellps=WGS84",sep='')))
return(as.data.frame(res))
}
x<-huayColordata$longitude
y<-huayColordata$latitude
#LongLatToUTM(x,y,18)
datos<-LongLatToUTM(x,y,18)
x <- datos$X
y <- datos$Y
z <- huayColordata$`altitude (m)`
r<-cbind.data.frame(x,y,z)
create the extent and the raster
e <- extent(r[,(1:2)])
r2 <- raster(e, ncol=788, nrow=810, crs= "+proj=longlat +datum=WGS84")
#another example using plotly
#as.matrix(rasterFromXYZ(r)) -> dem
as.matrix(r2)->dem
View(e)
View(r2)
r_new <- rasterize(r[,1:2], r2, r[,3], fun=max)
png(paste("raster_zhh3",".png",sep=""))
plot(r_new, col=rgb.pal(200), xlab="Lon", ylab="Lat", main=paste("Horizontal Reflectivity"),
legend.args=list(text=paste0("elevation"), side=4, font=2, line=2.5, cex=0.8))
dev.off()
plot(r_new, col=rgb.pal(200), xlab="Lon", ylab="Lat", main=paste("Horizontal Reflectivity"),
legend.args=list(text=paste0("elevation"), side=4, font=2, line=2.5, cex=2))
#create a custom pallate
rgb.pal <- colorRampPalette(c("snow1","snow2","light blue","blue","dark blue", "orange","red"), space = "rgb")
#create a custom pallate
rgb.pal <- colorRampPalette(c("red","green","light blue","blue","dark blue", "orange","brown"), space = "rgb")
png(paste("raster_zhh3",".png",sep=""))
plot(r_new, col=rgb.pal(600), xlab="Lon", ylab="Lat", main=paste("Horizontal Reflectivity"),
legend.args=list(text=paste0("elevation"), side=4, font=2, line=2.5, cex=1))
dev.off()
rgb.pal <- colorRampPalette(c("red","green","light blue","blue","dark blue", "orange","brown"), space = "rgb")
png(paste("raster_zhh3",".png",sep=""))
plot(r_new, col=rgb.pal(2600), xlab="Lon", ylab="Lat", main=paste("Horizontal"),
legend.args=list(text=paste0("elevation"), side=8, font=2, line=2.5, cex=1))
dev.off()
png(paste("raster_zhh4",".png",sep=""))
plot(r_new, col=rgb.pal(2600), xlab="Lon", ylab="Lat", main=paste("Horizontal"),
legend.args=list(text=paste0("elevation"), side=8, font=2, line=2.5, cex=1))
dev.off()
png(paste("raster",".png",sep=""))
plot(r_new, col=rgb.pal(2600), xlab="Lon", ylab="Lat", main=paste("Horizontal"),
legend.args=list(text=paste0("elevation"), side=4, font=2, line=4.5, cex=1))
dev.off()
png(paste("raster",".png",sep=""))
plot(r_new, col=rgb.pal(100), xlab="Lon", ylab="Lat", main=paste("Horizontal"),
legend.args=list(text=paste0("elevation"), side=4, font=2, line=2.5, cex=2))
dev.off()
e <- extent(r[,(1:2)])
r2 <- raster(e, ncol=188, nrow=110, crs= "+proj=longlat +datum=WGS84")
r_new <- rasterize(r[,1:2], r2, r[,3], fun=max)
#another example using plotly
#as.matrix(rasterFromXYZ(r)) -> dem
as.matrix(r_new)->dem
dim(dem)
fig <- plot_ly(z = ~dem)
fig <- fig %>% add_surface()
fig
#create the extent and the raster
e <- extent(r[,(1:2)])
r2 <- raster(e, ncol=188, nrow=110, crs= "+proj=longlat +datum=WGS84")
#the data have about, 270000 cells. that is how the number of ncol and nrow specified.
r_new <- rasterize(r[,1:2], r2, r[,3], fun=max)
#another example using plotly
#as.matrix(rasterFromXYZ(r)) -> dem
as.matrix(r_new)->dem
dim(dem)
fig <- plot_ly(z = ~dem)
fig <- fig %>% add_surface()
fig
#create a custom pallate
rgb.pal <- colorRampPalette(c("red","green","light blue","blue","dark blue", "orange","brown"), space = "rgb")
png(paste("raster",".png",sep=""))
plot(r_new, col=rgb.pal(500), xlab="Lon", ylab="Lat", main=paste("Horizontal"),
legend.args=list(text=paste0("elevation"), side=4, font=2, line=2.5, cex=2))
dev.off()
rgb.pal <- colorRampPalette(c("red","green","light blue","blue","dark blue", "orange","brown"), space = "rgb")
png(paste("raster1",".png",sep=""))
plot(r_new, col=rgb.pal(200), xlab="Lon", ylab="Lat", main=paste("Horizontal"),
legend.args=list(text=paste0("elevation"), side=4, font=2, line=2.5, cex=2))
dev.off()
#create a custom pallate
rgb.pal <- colorRampPalette(c("red","green","light blue","blue","dark blue", "orange","brown"), space = "rgb")
png(paste("raster2",".png",sep=""))
plot(r_new, col=rgb.pal(250), xlab="Lon", ylab="Lat", main=paste("Horizontal"),
legend.args=list(text=paste0("elevation"), side=4, font=2, line=2.5, cex=2))
dev.off()
#create a custom pallate
rgb.pal <- colorRampPalette(c("brown","green","light blue","blue","dark blue", "orange","red"), space = "rgb")
png(paste("raster3",".png",sep=""))
plot(r_new, col=rgb.pal(250), xlab="Lon", ylab="Lat", main=paste("Horizontal"),
legend.args=list(text=paste0("elevation"), side=4, font=2, line=2.5, cex=2))
dev.off()
#create a custom pallate
rgb.pal <- colorRampPalette(c("brown","green","light blue","blue","dark blue", "orange","red"), space = "rgb")
png(paste("raster1",".png",sep=""))
plot(r_new, col=rgb.pal(250), xlab="Lon", ylab="Lat", main=paste("Horizontal"),
legend.args=list(text=paste0("elevation"), side=4, font=2, line=4, cex=1))
dev.off()
create a custom pallate
rgb.pal <- colorRampPalette(c("brown","green","light blue","blue","dark blue", "orange","red"), space = "rgb")
png(paste("raster1",".png",sep=""))
plot(r_new, col=rgb.pal(250), xlab="Lon", ylab="Lat", main=paste("Horizontal"),
legend.args=list(text=paste0("elevation"), side=2, font=2, line=4, cex=3))
dev.off()
rgb.pal <- colorRampPalette(c("brown","green","light blue","blue","dark blue", "orange","red"), space = "rgb")
png(paste("raster1",".png",sep=""))
plot(r_new, col=rgb.pal(250), xlab="Lon", ylab="Lat", main=paste("Horizontal"),
legend.args=list(text=paste0("elevation"), side=2, font=2, line=4, cex=3))
dev.off()
#create a custom pallate
rgb.pal <- colorRampPalette(c("brown","green","light blue","blue","dark blue", "orange","red"), space = "rgb")
png(paste("raster2",".png",sep=""))
plot(r_new, col=rgb.pal(250), xlab="Lon", ylab="Lat", main=paste("Horizontal"),
legend.args=list(text=paste0("elevation"), side=3, font=2, line=6, cex=2))
dev.off()
r_new <- rasterize(r[,1:2], r2, r[,3], fun=mean)
#create a custom pallate
rgb.pal <- colorRampPalette(c("brown","green","light blue","blue","dark blue", "orange","red"), space = "rgb")
png(paste("raster3",".png",sep=""))
plot(r_new, col=rgb.pal(250), xlab="Lon", ylab="Lat", main=paste("Horizontal"),
legend.args=list(text=paste0("elevation"), side=3, font=2, line=6, cex=2))
dev.off()
#create a custom pallate
rgb.pal <- colorRampPalette(c("brown","green","light blue","blue","dark blue", "orange","red"), space = "rgb")
png(paste("raster4",".png",sep=""))
plot(r_new, col=rgb.pal(250), xlab="Lon", ylab="Lat", main=paste("Horizontal"),
legend.args=list(text=paste0("elevation"), side=4, font=4, line=6, cex=2))
dev.off()
#create a custom pallate
rgb.pal <- colorRampPalette(c("brown","green","light blue","blue","dark blue", "orange","red"), space = "rgb")
png(paste("raster5",".png",sep=""))
plot(r_new, col=rgb.pal(250), xlab="Lon", ylab="Lat", main=paste("Horizontal"),
legend.args=list(text=paste0("elevation"), side=4, font=1, line=6, cex=2))
dev.off()
png(paste("raster5",".png",sep=""))
plot(r_new, col=rgb.pal(250), xlab="Lon", ylab="Lat", main=paste("Horizontal"),
legend.args=list(text=paste0("elevation"), side=2, font=2, line=6, cex=2))
dev.off()
#create a custom pallate
rgb.pal <- colorRampPalette(c("brown","green","light blue","blue","dark blue", "orange","red"), space = "rgb")
png(paste("raster5",".png",sep=""))
plot(r_new, col=rgb.pal(250), xlab="Lon", ylab="Lat", main=paste("Horizontal"),
legend.args=list(text=paste0("elevation"), side=4, font=2, line=6, cex=2))
dev.off()
#create a custom pallate
rgb.pal <- colorRampPalette(c("dark green","green","light blue","blue","dark blue", "orange","red"), space = "rgb")
png(paste("raster5",".png",sep=""))
plot(r_new, col=rgb.pal(350), xlab="Lon", ylab="Lat", main=paste("Horizontal"),
legend.args=list(text=paste0("elevation"), side=4, font=2, line=6, cex=2))
dev.off()
r_new <- rasterize(r[,1:2], r2, r[,3], fun=max)
#create a custom pallate
rgb.pal <- colorRampPalette(c("dark green","green","light blue","blue","dark blue", "orange","red"), space = "rgb")
png(paste("raster1",".png",sep=""))
plot(r_new, col=rgb.pal(100), xlab="Lon", ylab="Lat", main=paste("Horizontal"),
legend.args=list(text=paste0("elevation"), side=4, font=1, line=3, cex=2))
dev.off()
#create a custom pallate
rgb.pal <- colorRampPalette(c("dark green","orange","light blue","blue","dark blue", "dark red","red"), space = "rgb")
png(paste("raster2",".png",sep=""))
plot(r_new, col=rgb.pal(100), xlab="Lon", ylab="Lat", main=paste("Horizontal"),
legend.args=list(text=paste0("elevation"), side=4, font=1, line=3, cex=2))
dev.off()
#create a custom pallate
rgb.pal <- colorRampPalette(c("green","dark green","light blue","blue","dark blue", "orange","red"), space = "rgb")
png(paste("raster2",".png",sep=""))
plot(r_new, col=rgb.pal(100), xlab="Lon", ylab="Lat", main=paste("Horizontal"),
legend.args=list(text=paste0("elevation"), side=4, font=1, line=3, cex=2))
dev.off()
#an example using dem data
read.csv("xyz_mrp") -> r
x <- r$x
y <- r$y
z <- r$mrpUTM1_Resample1
#create custom color for rgl plot
myColorRamp <- function(colors, values) {
v <- (values - min(values))/diff(range(values))
x <- colorRamp(colors)(v)
rgb(x[,1], x[,2], x[,3], maxColorValue = 255)
}
# z as the fourth variable
col <- myColorRamp(c("blue", "green","yellow", "orange", "red"), z)
plot3d(x = x, y = y, z = z, col=col)
library(sp)
library(rgdal)
library(readr)
huayColordata <- read_delim("D:/DOCUMENTOS/UNIVERSIDAD_DE_LIMA/IDIC/2021/humanitariaLogistics/googleEarthAPI/huaycolor3Dplot/huayColordata.txt",
"\t", quote = "'", escape_double = FALSE,
trim_ws = TRUE)
#Function
LongLatToUTM<-function(x,y,zone){
xy <- data.frame(ID = 1:length(x), X = x, Y = y)
coordinates(xy) <- c("X", "Y")
proj4string(xy) <- CRS("+proj=longlat +datum=WGS84")  ## for example
res <- spTransform(xy, CRS(paste("+proj=utm +zone=",zone," ellps=WGS84",sep='')))
return(as.data.frame(res))
}
x<-huayColordata$longitude
y<-huayColordata$latitude
#LongLatToUTM(x,y,18)
datos<-LongLatToUTM(x,y,18)
x <- datos$X
y <- datos$Y
z <- huayColordata$`altitude (m)`
r<-cbind.data.frame(x,y,z)
str(r)
#create custom color for rgl plot
myColorRamp <- function(colors, values) {
v <- (values - min(values))/diff(range(values))
x <- colorRamp(colors)(v)
rgb(x[,1], x[,2], x[,3], maxColorValue = 255)
}
# z as the fourth variable
col <- myColorRamp(c("blue", "green","yellow", "orange", "red"), z)
plot3d(x = x, y = y, z = z, col=col)
#using rgl
plot3d(x = x, y = y, z = z)
#create a custom pallate
rgb.pal <- colorRampPalette(c("green","dark green","light blue","blue","dark blue", "orange","red"), space = "rgb")
png(paste("raster3",".png",sep=""))
plot(r_new, col=rgb.pal(200), xlab="Lon", ylab="Lat", main=paste("Horizontal"),
legend.args=list(text=paste0("elevation"), side=4, font=1, line=3, cex=2))
dev.off()
#create a custom pallate
rgb.pal <- colorRampPalette(c("green","dark green","light blue","blue","dark blue", "orange","red"), space = "rgb", interpolate="linear",alpha=TRUE)
#create a custom pallate
rgb.pal <- colorRampPalette(c("green","dark green","light blue","blue","dark blue", "orange","red"), space = "rgb", interpolate="linear",alpha=FALSE)
png(paste("raster3",".png",sep=""))
plot(r_new, col=rgb.pal(200), xlab="Lon", ylab="Lat", main=paste("Horizontal"),
legend.args=list(text=paste0("elevation"), side=4, font=1, line=3, cex=2))
dev.off()
#create a custom pallate
rgb.pal <- colorRampPalette(c("green","dark green","light blue","blue","dark blue", "orange","red"), space = "rgb", interpolate="linear",alpha=FALSE)
png(paste("raster4",".png",sep=""))
plot(r_new, col=rgb.pal(800), xlab="Lon", ylab="Lat", main=paste("Horizontal"),
legend.args=list(text=paste0("elevation"), side=4, font=1, line=3, cex=2))
dev.off()
#create a custom pallate
rgb.pal <- colorRampPalette(c("green","dark green","light blue","blue","dark blue", "orange","red"), space = "rgb", interpolate="linear",alpha=FALSE)
png(paste("raster4",".png",sep=""))
plot(r_new, col=rgb.pal(100), xlab="Lon", ylab="Lat", main=paste("Horizontal"),
legend.args=list(text=paste0("elevation"), side=4, font=1, line=3, cex=2))
dev.off()
#create a custom pallate
rgb.pal <- colorRampPalette(c("green","dark green","light blue","blue","dark blue", "orange","red"), space = "rgb", interpolate="linear",alpha=FALSE)
png(paste("raster4",".png",sep=""))
plot(r_new, col=rgb.pal(10), xlab="Lon", ylab="Lat", main=paste("Horizontal"),
legend.args=list(text=paste0("elevation"), side=4, font=1, line=3, cex=2))
dev.off()
#create a custom pallate
rgb.pal <- colorRampPalette(c("green","dark green","light blue","blue","dark blue", "orange","red"), space = "rgb", interpolate="linear",alpha=FALSE)
png(paste("raster5",".png",sep=""))
plot(r_new, col=rgb.pal(100), xlab="Lon", ylab="Lat", main=paste("Horizontal"),
legend.args=list(text=paste0("elevation"), side=4, font=1, line=3, cex=2))
dev.off()
#another example using plotly
#as.matrix(rasterFromXYZ(r)) -> dem
as.matrix(r)->dem
dim(dem)
fig <- plot_ly(z = ~dem)
fig <- fig %>% add_surface()
fig
str(r)
